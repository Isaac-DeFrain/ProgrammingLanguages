(* Dan Grossman, Coursera PL, HW2 Provided Code *)


(* Question 1 *)
(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)

fun same_string(s1 : string, s2 : string) =
    s1 = s2;

(* put your solutions for problem 1 here *)

(* (a) all_except_option : string * string list -> list minus string option if present, else NONE *) 
fun all_except_option (str : string, list : string list) =
    let fun all_except_list (str : string, list : string list) =
	    case list of
		[] => []
	      | x::rest => if same_string(str,x) then rest else x::all_except_list(str,rest)
    in
	let val newlist = all_except_list(str,list)
	in
	    if length(list) = length(newlist) + 1 andalso list <> []
	    then SOME newlist
	    else NONE
	end
    end;

(* All tests pass! YAY! :D
val test1 = all_except_option("a",["1","4","a","5"]) = SOME ["1","4","5"];
val test2 = all_except_option("a",["a"]) = SOME [];
val test3 = all_except_option("a",["b"]) = NONE;
val test4 = all_except_option("a",[]) = NONE;*)


(* (b) get_sunstitutions1 :  string list list * string -> list of all strings in some list minus input string *)
fun get_substitutions1 (subs : string list list, name : string) =
    case subs of
	[] => []
      | x::rest => let val optx = all_except_option(name,x)
		       val getrest = get_substitutions1(rest,name)
		   in
		       if isSome(optx)
		       then valOf(optx) @ getrest
		       else getrest
		   end;

(* All tests passed! YAY! :D
val test1 = get_substitutions1([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]],"Fred") = ["Fredrick","Freddie","F"];
val test2 = get_substitutions1([["Fred","Fredrick"],["Jeff","Jeffrey"],["Geoff","Jeff","Jeffrey"]],"Jeff") = ["Jeffrey","Geoff","Jeffrey"];
val test3 = get_substitutions1([[]],"a") = [];
val test4 = get_substitutions1([["a"],["b","c"]],"d") = [];*)


(* (c) function get_substitutions2 like get_substitutions1 but uses a tail recursive local function *)
fun get_substitutions2 (subs : string list list, name : string) =
    let fun aux (subs : string list list, name : string, acc) =
	    case subs of
		[] => acc
	      | x::rest => let val optx = all_except_option(name,x)
			       val accrest = aux(rest,name,acc)			   
			in
			    if isSome(optx)
			    then valOf(optx) @ accrest
			    else accrest
			end
    in
	aux(subs,name,[])
    end;

(* All tests passed! YAY! :D
val test1 = get_substitutions2([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]],"Fred") = ["Fredrick","Freddie","F"];
val test2 = get_substitutions2([["Fred","Fredrick"],["Jeff","Jeffrey"],["Geoff","Jeff","Jeffrey"]],"Jeff") = ["Jeffrey","Geoff","Jeffrey"];
val test3 = get_substitutions2([[]],"a") = [];
val test4 = get_substitutions2([["a"],["b","c"]],"d") = [];*)


(* (d) similar_names : name list list * full name record -> "simialr" full name record list *)
(* Is there a better way to do this problem? *)
fun similar_names (subs : string list list, {first=x,middle=y,last=z}) =
    let fun get_sub_list (subs : string list list, name : string) =
	    case subs of
		[] => []
	      | a::rest => let val opta = all_except_option(x,a)
			       val getrest = get_sub_list(rest,x)
			   in
			       if isSome(opta)
			       then valOf(opta) @ getrest
			       else getrest
			   end
    in
	let fun list_to_rec (sublist : string list) =
		case sublist of
		    [] => []
		  | x::rest => {first=x,middle=y,last=z}::list_to_rec(rest)
	in
	    list_to_rec(get_sub_list(subs,x))
	end
    end;

(* All tests passed! YAY! :D
val test1 = similar_names([["Elizabeth","Betty"],["Freddie","Fred","F"]],{first="Fred",middle="J",last="Smith"}) = [{first="Freddie",middle="J",last="Smith"},{first="F",middle="J",last="Smith"}];
val test2 = similar_names([[]],{first="a",middle="b",last="c"}) = [];
val test3 = similar_names([["a","b"],["b","c"]],{first="a",middle="B",last="C"}) = [{first="b",middle="B",last="C"}];
val test4 = similar_names([["a","b"],["b","c"]],{first="d",middle="b",last="c"}) = [];*)


(*Question 2 *)

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)

datatype suit = Clubs | Diamonds | Hearts | Spades;
datatype rank = Jack | Queen | King | Ace | Num of int;
type card = suit * rank;

datatype color = Red | Black;
datatype move = Discard of card | Draw ;

exception IllegalMove;

(* put your solutions for problem 2 here *)

(* (a) card_color : card -> card's color *)
fun card_color c =
    case c of
	(Clubs,_) => Black
      | (Spades,_) => Black
      | _ => Red;

(* All tests passed! YAY! :D
val test1 = card_color(Clubs,Jack) = Black;
val test2 = card_color(Spades,Ace) = Black;
val test3 = card_color(Hearts,Num 3) = Red;
val test4 = card_color(Diamonds,Queen) = Red;*)

(* (b) card_value : card -> value: Num i => i, Ace => 11, Jack/Quen/King => 10 *)
fun card_value c =
    case c of
	(_,Num i) => i
      | (_,Ace) => 11
      | _ => 10;

(* All tests passed! YAY! :D
val test1 = card_value(Clubs,Jack) = 10;
val test2 = card_value(Spades,Ace) = 11;
val test3 = card_value(Hearts,Num 3) = 3;
val test4 = card_value(Diamonds,Queen) = 10;*)

(* (c) remove_card : card list * card * exn -> list with first instance of card removed, exception if card not in list *)
fun remove_card (cs : card list, c : card, e : exn) =
    let fun accum (cs : card list, c : card, e, acc) =
	    case cs of
		x::rest => if x = c then acc @ rest else accum(rest,c,e,x::acc)
	      | _ => raise e
    in
	accum(cs,c,e,[])
    end;

(* All tests passed! YAY! :D
val test1 = remove_card([(Clubs,Jack),(Clubs,Jack)],(Clubs,Jack),IllegalMove) = [(Clubs,Jack)];
val test2 = remove_card([(Hearts,Jack),(Clubs,Num 10)],(Clubs,Jack),IllegalMove);*) (*IllegalMove exception raised*)

(* (d) all_same_color : card list -> true if all cards have the same color, else false *)
fun all_same_color (cs : card list) =
    case cs of
	x::y::rest => card_color(x) = card_color(y) andalso all_same_color(y::rest)
      | _ => true;

(* All tests passed! YAY! :D
val test1 = all_same_color([(Clubs,Jack),(Clubs,Queen),(Spades,Num 5)]) = true;
val test2 = all_same_color([(Hearts,Jack),(Diamonds,Num 10),(Spades,Ace)]) = false;*)

(* (e) sum_cards : card list -> sum of cards in list (use tail recursive helper fn) *)
fun sum_cards (cs : card list) =
    let fun aux (cs,acc) =
	    case cs of
		[] => acc
	      | c::rest => aux(rest,card_value(c) + acc)
    in
	aux(cs,0)
    end;

(* All tests passed! YAY!
val test1 = sum_cards([(Clubs,Jack),(Clubs,Queen),(Spades,Num 5)]) = 25;
val test2 = sum_cards([(Hearts,Jack),(Diamonds,Num 10),(Spades,Ace)]) = 31;*)

(* (f) score : card list * int (goal) -> score described above *)
